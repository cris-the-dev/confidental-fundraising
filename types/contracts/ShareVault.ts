/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ShareVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CACHE_TIMEOUT"
      | "callbackDecryptAvailableBalance"
      | "callbackDecryptMyContribution"
      | "callbackDecryptTotalRaised"
      | "campaignContract"
      | "campaignCount"
      | "campaigns"
      | "deposit"
      | "getAvailableBalance"
      | "getAvailableBalanceStatus"
      | "getEncryptedBalance"
      | "getEncryptedBalanceAndLocked"
      | "getEncryptedTotalLocked"
      | "hasClaimed"
      | "hasClaimedTokens"
      | "lockFunds"
      | "owner"
      | "protocolId"
      | "requestAvailableBalanceDecryption"
      | "setCampaignContract"
      | "transferLockedFunds"
      | "unlockFunds"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AvailableBalanceDecrypted"
      | "DecryptionFulfilled"
      | "Deposited"
      | "FundsLocked"
      | "FundsTransferred"
      | "FundsUnlocked"
      | "LockRequestInitiated"
      | "WithdrawalDecryptionRequested"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CACHE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callbackDecryptAvailableBalance",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackDecryptMyContribution",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackDecryptTotalRaised",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalanceStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedBalanceAndLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTotalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedTokens",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAvailableBalanceDecryption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLockedFunds",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CACHE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackDecryptAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackDecryptMyContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackDecryptTotalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalanceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedBalanceAndLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTotalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestAvailableBalanceDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLockedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AvailableBalanceDecryptedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsLockedEvent {
  export type InputTuple = [user: AddressLike, campaignId: BigNumberish];
  export type OutputTuple = [user: string, campaignId: bigint];
  export interface OutputObject {
    user: string;
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsTransferredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    campaignId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, campaignId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsUnlockedEvent {
  export type InputTuple = [user: AddressLike, campaignId: BigNumberish];
  export type OutputTuple = [user: string, campaignId: bigint];
  export interface OutputObject {
    user: string;
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockRequestInitiatedEvent {
  export type InputTuple = [
    user: AddressLike,
    campaignId: BigNumberish,
    requestId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    campaignId: bigint,
    requestId: bigint
  ];
  export interface OutputObject {
    user: string;
    campaignId: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalDecryptionRequestedEvent {
  export type InputTuple = [user: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [user: string, requestId: bigint];
  export interface OutputObject {
    user: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShareVault extends BaseContract {
  connect(runner?: ContractRunner | null): ShareVault;
  waitForDeployment(): Promise<this>;

  interface: ShareVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CACHE_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  callbackDecryptAvailableBalance: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callbackDecryptMyContribution: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callbackDecryptTotalRaised: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  campaignContract: TypedContractMethod<[], [string], "view">;

  campaignCount: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        owner: string;
        title: string;
        description: string;
        totalRaised: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  getAvailableBalance: TypedContractMethod<[], [bigint], "view">;

  getAvailableBalanceStatus: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        status: bigint;
        availableAmount: bigint;
        cacheExpiry: bigint;
      }
    ],
    "view"
  >;

  getEncryptedBalance: TypedContractMethod<[], [string], "view">;

  getEncryptedBalanceAndLocked: TypedContractMethod<
    [],
    [[string, string] & { balance: string; locked: string }],
    "view"
  >;

  getEncryptedTotalLocked: TypedContractMethod<[], [string], "view">;

  hasClaimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  hasClaimedTokens: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  lockFunds: TypedContractMethod<
    [user: AddressLike, campaignId: BigNumberish, amount: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestAvailableBalanceDecryption: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  setCampaignContract: TypedContractMethod<
    [_campaignContract: AddressLike],
    [void],
    "nonpayable"
  >;

  transferLockedFunds: TypedContractMethod<
    [user: AddressLike, campaignOwner: AddressLike, campaignId: BigNumberish],
    [string],
    "nonpayable"
  >;

  unlockFunds: TypedContractMethod<
    [user: AddressLike, campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CACHE_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "callbackDecryptAvailableBalance"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackDecryptMyContribution"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackDecryptTotalRaised"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaignContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        owner: string;
        title: string;
        description: string;
        totalRaised: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getAvailableBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableBalanceStatus"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        status: bigint;
        availableAmount: bigint;
        cacheExpiry: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedBalance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedBalanceAndLocked"
  ): TypedContractMethod<
    [],
    [[string, string] & { balance: string; locked: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedTotalLocked"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimedTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockFunds"
  ): TypedContractMethod<
    [user: AddressLike, campaignId: BigNumberish, amount: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestAvailableBalanceDecryption"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCampaignContract"
  ): TypedContractMethod<
    [_campaignContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLockedFunds"
  ): TypedContractMethod<
    [user: AddressLike, campaignOwner: AddressLike, campaignId: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockFunds"
  ): TypedContractMethod<
    [user: AddressLike, campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AvailableBalanceDecrypted"
  ): TypedContractEvent<
    AvailableBalanceDecryptedEvent.InputTuple,
    AvailableBalanceDecryptedEvent.OutputTuple,
    AvailableBalanceDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsLocked"
  ): TypedContractEvent<
    FundsLockedEvent.InputTuple,
    FundsLockedEvent.OutputTuple,
    FundsLockedEvent.OutputObject
  >;
  getEvent(
    key: "FundsTransferred"
  ): TypedContractEvent<
    FundsTransferredEvent.InputTuple,
    FundsTransferredEvent.OutputTuple,
    FundsTransferredEvent.OutputObject
  >;
  getEvent(
    key: "FundsUnlocked"
  ): TypedContractEvent<
    FundsUnlockedEvent.InputTuple,
    FundsUnlockedEvent.OutputTuple,
    FundsUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "LockRequestInitiated"
  ): TypedContractEvent<
    LockRequestInitiatedEvent.InputTuple,
    LockRequestInitiatedEvent.OutputTuple,
    LockRequestInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalDecryptionRequested"
  ): TypedContractEvent<
    WithdrawalDecryptionRequestedEvent.InputTuple,
    WithdrawalDecryptionRequestedEvent.OutputTuple,
    WithdrawalDecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AvailableBalanceDecrypted(address,uint64)": TypedContractEvent<
      AvailableBalanceDecryptedEvent.InputTuple,
      AvailableBalanceDecryptedEvent.OutputTuple,
      AvailableBalanceDecryptedEvent.OutputObject
    >;
    AvailableBalanceDecrypted: TypedContractEvent<
      AvailableBalanceDecryptedEvent.InputTuple,
      AvailableBalanceDecryptedEvent.OutputTuple,
      AvailableBalanceDecryptedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "Deposited(address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FundsLocked(address,uint16)": TypedContractEvent<
      FundsLockedEvent.InputTuple,
      FundsLockedEvent.OutputTuple,
      FundsLockedEvent.OutputObject
    >;
    FundsLocked: TypedContractEvent<
      FundsLockedEvent.InputTuple,
      FundsLockedEvent.OutputTuple,
      FundsLockedEvent.OutputObject
    >;

    "FundsTransferred(address,address,uint16)": TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;
    FundsTransferred: TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;

    "FundsUnlocked(address,uint16)": TypedContractEvent<
      FundsUnlockedEvent.InputTuple,
      FundsUnlockedEvent.OutputTuple,
      FundsUnlockedEvent.OutputObject
    >;
    FundsUnlocked: TypedContractEvent<
      FundsUnlockedEvent.InputTuple,
      FundsUnlockedEvent.OutputTuple,
      FundsUnlockedEvent.OutputObject
    >;

    "LockRequestInitiated(address,uint16,uint256)": TypedContractEvent<
      LockRequestInitiatedEvent.InputTuple,
      LockRequestInitiatedEvent.OutputTuple,
      LockRequestInitiatedEvent.OutputObject
    >;
    LockRequestInitiated: TypedContractEvent<
      LockRequestInitiatedEvent.InputTuple,
      LockRequestInitiatedEvent.OutputTuple,
      LockRequestInitiatedEvent.OutputObject
    >;

    "WithdrawalDecryptionRequested(address,uint256)": TypedContractEvent<
      WithdrawalDecryptionRequestedEvent.InputTuple,
      WithdrawalDecryptionRequestedEvent.OutputTuple,
      WithdrawalDecryptionRequestedEvent.OutputObject
    >;
    WithdrawalDecryptionRequested: TypedContractEvent<
      WithdrawalDecryptionRequestedEvent.InputTuple,
      WithdrawalDecryptionRequestedEvent.OutputTuple,
      WithdrawalDecryptionRequestedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
