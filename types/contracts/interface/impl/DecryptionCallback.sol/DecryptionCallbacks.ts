/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface DecryptionCallbacksInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CACHE_TIMEOUT"
      | "callbackDecryptAvailableBalance"
      | "callbackDecryptMyContribution"
      | "callbackDecryptTotalRaised"
      | "campaignContract"
      | "campaignCount"
      | "campaigns"
      | "hasClaimed"
      | "hasClaimedTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DecryptionFulfilled"): EventFragment;

  encodeFunctionData(
    functionFragment: "CACHE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callbackDecryptAvailableBalance",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackDecryptMyContribution",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackDecryptTotalRaised",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedTokens",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CACHE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackDecryptAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackDecryptMyContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackDecryptTotalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedTokens",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DecryptionCallbacks extends BaseContract {
  connect(runner?: ContractRunner | null): DecryptionCallbacks;
  waitForDeployment(): Promise<this>;

  interface: DecryptionCallbacksInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CACHE_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  callbackDecryptAvailableBalance: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callbackDecryptMyContribution: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callbackDecryptTotalRaised: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  campaignContract: TypedContractMethod<[], [string], "view">;

  campaignCount: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        owner: string;
        title: string;
        description: string;
        totalRaised: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;

  hasClaimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  hasClaimedTokens: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CACHE_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "callbackDecryptAvailableBalance"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackDecryptMyContribution"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackDecryptTotalRaised"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaignContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        owner: string;
        title: string;
        description: string;
        totalRaised: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
        tokenAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimedTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
  };
}
