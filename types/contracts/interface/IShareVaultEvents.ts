/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IShareVaultEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AvailableBalanceDecrypted"
      | "Deposited"
      | "FundsLocked"
      | "FundsTransferred"
      | "FundsUnlocked"
      | "LockRequestInitiated"
      | "WithdrawalDecryptionRequested"
      | "Withdrawn"
  ): EventFragment;
}

export namespace AvailableBalanceDecryptedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsLockedEvent {
  export type InputTuple = [user: AddressLike, campaignId: BigNumberish];
  export type OutputTuple = [user: string, campaignId: bigint];
  export interface OutputObject {
    user: string;
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsTransferredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    campaignId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, campaignId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsUnlockedEvent {
  export type InputTuple = [user: AddressLike, campaignId: BigNumberish];
  export type OutputTuple = [user: string, campaignId: bigint];
  export interface OutputObject {
    user: string;
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockRequestInitiatedEvent {
  export type InputTuple = [
    user: AddressLike,
    campaignId: BigNumberish,
    requestId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    campaignId: bigint,
    requestId: bigint
  ];
  export interface OutputObject {
    user: string;
    campaignId: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalDecryptionRequestedEvent {
  export type InputTuple = [user: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [user: string, requestId: bigint];
  export interface OutputObject {
    user: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IShareVaultEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IShareVaultEvents;
  waitForDeployment(): Promise<this>;

  interface: IShareVaultEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AvailableBalanceDecrypted"
  ): TypedContractEvent<
    AvailableBalanceDecryptedEvent.InputTuple,
    AvailableBalanceDecryptedEvent.OutputTuple,
    AvailableBalanceDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsLocked"
  ): TypedContractEvent<
    FundsLockedEvent.InputTuple,
    FundsLockedEvent.OutputTuple,
    FundsLockedEvent.OutputObject
  >;
  getEvent(
    key: "FundsTransferred"
  ): TypedContractEvent<
    FundsTransferredEvent.InputTuple,
    FundsTransferredEvent.OutputTuple,
    FundsTransferredEvent.OutputObject
  >;
  getEvent(
    key: "FundsUnlocked"
  ): TypedContractEvent<
    FundsUnlockedEvent.InputTuple,
    FundsUnlockedEvent.OutputTuple,
    FundsUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "LockRequestInitiated"
  ): TypedContractEvent<
    LockRequestInitiatedEvent.InputTuple,
    LockRequestInitiatedEvent.OutputTuple,
    LockRequestInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalDecryptionRequested"
  ): TypedContractEvent<
    WithdrawalDecryptionRequestedEvent.InputTuple,
    WithdrawalDecryptionRequestedEvent.OutputTuple,
    WithdrawalDecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AvailableBalanceDecrypted(address,uint64)": TypedContractEvent<
      AvailableBalanceDecryptedEvent.InputTuple,
      AvailableBalanceDecryptedEvent.OutputTuple,
      AvailableBalanceDecryptedEvent.OutputObject
    >;
    AvailableBalanceDecrypted: TypedContractEvent<
      AvailableBalanceDecryptedEvent.InputTuple,
      AvailableBalanceDecryptedEvent.OutputTuple,
      AvailableBalanceDecryptedEvent.OutputObject
    >;

    "Deposited(address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FundsLocked(address,uint16)": TypedContractEvent<
      FundsLockedEvent.InputTuple,
      FundsLockedEvent.OutputTuple,
      FundsLockedEvent.OutputObject
    >;
    FundsLocked: TypedContractEvent<
      FundsLockedEvent.InputTuple,
      FundsLockedEvent.OutputTuple,
      FundsLockedEvent.OutputObject
    >;

    "FundsTransferred(address,address,uint16)": TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;
    FundsTransferred: TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;

    "FundsUnlocked(address,uint16)": TypedContractEvent<
      FundsUnlockedEvent.InputTuple,
      FundsUnlockedEvent.OutputTuple,
      FundsUnlockedEvent.OutputObject
    >;
    FundsUnlocked: TypedContractEvent<
      FundsUnlockedEvent.InputTuple,
      FundsUnlockedEvent.OutputTuple,
      FundsUnlockedEvent.OutputObject
    >;

    "LockRequestInitiated(address,uint16,uint256)": TypedContractEvent<
      LockRequestInitiatedEvent.InputTuple,
      LockRequestInitiatedEvent.OutputTuple,
      LockRequestInitiatedEvent.OutputObject
    >;
    LockRequestInitiated: TypedContractEvent<
      LockRequestInitiatedEvent.InputTuple,
      LockRequestInitiatedEvent.OutputTuple,
      LockRequestInitiatedEvent.OutputObject
    >;

    "WithdrawalDecryptionRequested(address,uint256)": TypedContractEvent<
      WithdrawalDecryptionRequestedEvent.InputTuple,
      WithdrawalDecryptionRequestedEvent.OutputTuple,
      WithdrawalDecryptionRequestedEvent.OutputObject
    >;
    WithdrawalDecryptionRequested: TypedContractEvent<
      WithdrawalDecryptionRequestedEvent.InputTuple,
      WithdrawalDecryptionRequestedEvent.OutputTuple,
      WithdrawalDecryptionRequestedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
