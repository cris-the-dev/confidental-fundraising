/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IFundraisingEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCancelled"
      | "CampaignCreated"
      | "CampaignFailed"
      | "CampaignFinalized"
      | "ContributionMade"
      | "TokensClaimed"
      | "TokensDistributed"
  ): EventFragment;
}

export namespace CampaignCancelledEvent {
  export type InputTuple = [campaignId: BigNumberish];
  export type OutputTuple = [campaignId: bigint];
  export interface OutputObject {
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    owner: AddressLike,
    title: string,
    targetAmount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    owner: string,
    title: string,
    targetAmount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    owner: string;
    title: string;
    targetAmount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignFailedEvent {
  export type InputTuple = [campaignId: BigNumberish];
  export type OutputTuple = [campaignId: bigint];
  export interface OutputObject {
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignFinalizedEvent {
  export type InputTuple = [campaignId: BigNumberish, targetReached: boolean];
  export type OutputTuple = [campaignId: bigint, targetReached: boolean];
  export interface OutputObject {
    campaignId: bigint;
    targetReached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionMadeEvent {
  export type InputTuple = [campaignId: BigNumberish, contributor: AddressLike];
  export type OutputTuple = [campaignId: bigint, contributor: string];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [campaignId: BigNumberish, contributor: AddressLike];
  export type OutputTuple = [campaignId: bigint, contributor: string];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDistributedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    contributor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    contributor: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFundraisingEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IFundraisingEvents;
  waitForDeployment(): Promise<this>;

  interface: IFundraisingEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CampaignCancelled"
  ): TypedContractEvent<
    CampaignCancelledEvent.InputTuple,
    CampaignCancelledEvent.OutputTuple,
    CampaignCancelledEvent.OutputObject
  >;
  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignFailed"
  ): TypedContractEvent<
    CampaignFailedEvent.InputTuple,
    CampaignFailedEvent.OutputTuple,
    CampaignFailedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignFinalized"
  ): TypedContractEvent<
    CampaignFinalizedEvent.InputTuple,
    CampaignFinalizedEvent.OutputTuple,
    CampaignFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionMade"
  ): TypedContractEvent<
    ContributionMadeEvent.InputTuple,
    ContributionMadeEvent.OutputTuple,
    ContributionMadeEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensDistributed"
  ): TypedContractEvent<
    TokensDistributedEvent.InputTuple,
    TokensDistributedEvent.OutputTuple,
    TokensDistributedEvent.OutputObject
  >;

  filters: {
    "CampaignCancelled(uint256)": TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;
    CampaignCancelled: TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;

    "CampaignCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignFailed(uint16)": TypedContractEvent<
      CampaignFailedEvent.InputTuple,
      CampaignFailedEvent.OutputTuple,
      CampaignFailedEvent.OutputObject
    >;
    CampaignFailed: TypedContractEvent<
      CampaignFailedEvent.InputTuple,
      CampaignFailedEvent.OutputTuple,
      CampaignFailedEvent.OutputObject
    >;

    "CampaignFinalized(uint256,bool)": TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;
    CampaignFinalized: TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;

    "ContributionMade(uint256,address)": TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    ContributionMade: TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;

    "TokensClaimed(uint256,address)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TokensDistributed(uint16,address,uint256)": TypedContractEvent<
      TokensDistributedEvent.InputTuple,
      TokensDistributedEvent.OutputTuple,
      TokensDistributedEvent.OutputObject
    >;
    TokensDistributed: TypedContractEvent<
      TokensDistributedEvent.InputTuple,
      TokensDistributedEvent.OutputTuple,
      TokensDistributedEvent.OutputObject
    >;
  };
}
