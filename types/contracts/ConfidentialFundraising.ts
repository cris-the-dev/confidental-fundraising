/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConfidentialFundraisingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackDecryptMyContribution"
      | "callbackDecryptTotalRaised"
      | "campaignCount"
      | "campaigns"
      | "cancelCampaign"
      | "claimTokens"
      | "contribute"
      | "createCampaign"
      | "finalizeCampaign"
      | "getCampaign"
      | "getMyContribution"
      | "getTotalRaised"
      | "hasClaimed"
      | "protocolId"
      | "requestMyContributionDecryption"
      | "requestTotalRaisedDecryption"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCancelled"
      | "CampaignCreated"
      | "CampaignFinalized"
      | "ContributionMade"
      | "DecryptionFulfilled"
      | "TokensClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackDecryptMyContribution",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackDecryptTotalRaised",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyContribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRaised",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestMyContributionDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTotalRaisedDecryption",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "callbackDecryptMyContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackDecryptTotalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestMyContributionDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTotalRaisedDecryption",
    data: BytesLike
  ): Result;
}

export namespace CampaignCancelledEvent {
  export type InputTuple = [campaignId: BigNumberish];
  export type OutputTuple = [campaignId: bigint];
  export interface OutputObject {
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    owner: AddressLike,
    title: string,
    targetAmount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    owner: string,
    title: string,
    targetAmount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    owner: string;
    title: string;
    targetAmount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignFinalizedEvent {
  export type InputTuple = [campaignId: BigNumberish, targetReached: boolean];
  export type OutputTuple = [campaignId: bigint, targetReached: boolean];
  export interface OutputObject {
    campaignId: bigint;
    targetReached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionMadeEvent {
  export type InputTuple = [campaignId: BigNumberish, contributor: AddressLike];
  export type OutputTuple = [campaignId: bigint, contributor: string];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [campaignId: BigNumberish, contributor: AddressLike];
  export type OutputTuple = [campaignId: bigint, contributor: string];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialFundraising extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialFundraising;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialFundraisingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackDecryptMyContribution: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callbackDecryptTotalRaised: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  campaignCount: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, boolean, boolean] & {
        owner: string;
        title: string;
        description: string;
        totalRaised: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;

  cancelCampaign: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimTokens: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  contribute: TypedContractMethod<
    [
      campaignId: BigNumberish,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createCampaign: TypedContractMethod<
    [
      title: string,
      description: string,
      target: BigNumberish,
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  finalizeCampaign: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCampaign: TypedContractMethod<
    [campaignId: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        owner: string;
        title: string;
        description: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;

  getMyContribution: TypedContractMethod<
    [campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalRaised: TypedContractMethod<
    [campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  hasClaimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestMyContributionDecryption: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestTotalRaisedDecryption: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackDecryptMyContribution"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackDecryptTotalRaised"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, boolean, boolean] & {
        owner: string;
        title: string;
        description: string;
        totalRaised: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelCampaign"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<
    [
      campaignId: BigNumberish,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      target: BigNumberish,
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeCampaign"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [campaignId: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, boolean] & {
        owner: string;
        title: string;
        description: string;
        targetAmount: bigint;
        deadline: bigint;
        finalized: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyContribution"
  ): TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalRaised"
  ): TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestMyContributionDecryption"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTotalRaisedDecryption"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CampaignCancelled"
  ): TypedContractEvent<
    CampaignCancelledEvent.InputTuple,
    CampaignCancelledEvent.OutputTuple,
    CampaignCancelledEvent.OutputObject
  >;
  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignFinalized"
  ): TypedContractEvent<
    CampaignFinalizedEvent.InputTuple,
    CampaignFinalizedEvent.OutputTuple,
    CampaignFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionMade"
  ): TypedContractEvent<
    ContributionMadeEvent.InputTuple,
    ContributionMadeEvent.OutputTuple,
    ContributionMadeEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;

  filters: {
    "CampaignCancelled(uint256)": TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;
    CampaignCancelled: TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;

    "CampaignCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignFinalized(uint256,bool)": TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;
    CampaignFinalized: TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;

    "ContributionMade(uint256,address)": TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    ContributionMade: TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "TokensClaimed(uint256,address)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
  };
}
