/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IFundraisingErrors,
  IFundraisingErrorsInterface,
} from "../../../contracts/interface/IFundraisingErrors";

const _abi = [
  {
    inputs: [],
    name: "AlreadyCancelled",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyFinalized",
    type: "error",
  },
  {
    inputs: [],
    name: "CacheExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "CampaignEnded",
    type: "error",
  },
  {
    inputs: [],
    name: "CampaignNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "CampaignNotFinalized",
    type: "error",
  },
  {
    inputs: [],
    name: "CampaignStillActive",
    type: "error",
  },
  {
    inputs: [],
    name: "ContributionNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "DataProcessing",
    type: "error",
  },
  {
    inputs: [],
    name: "DecryptAlreadyInProgress",
    type: "error",
  },
  {
    inputs: [],
    name: "MyContributionNotDecrypted",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TotalRaisedNotDecrypted",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedAccess",
    type: "error",
  },
] as const;

export class IFundraisingErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IFundraisingErrorsInterface {
    return new Interface(_abi) as IFundraisingErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IFundraisingErrors {
    return new Contract(address, _abi, runner) as unknown as IFundraisingErrors;
  }
}
