/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IShareVaultErrors,
  IShareVaultErrorsInterface,
} from "../../../contracts/interface/IShareVaultErrors";

const _abi = [
  {
    inputs: [],
    name: "CampaignContractAlreadySet",
    type: "error",
  },
  {
    inputs: [],
    name: "DecryptAlreadyInProgress",
    type: "error",
  },
  {
    inputs: [],
    name: "DecryptionCacheExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "DecryptionProcessing",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositAmountTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientAvailableBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientUnlockedBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientVaultBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDepositAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWithdrawalAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "MustDecryptFirst",
    type: "error",
  },
  {
    inputs: [],
    name: "NoBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "NoLockedAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyCampaignContract",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "UserHasNoBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalFailed",
    type: "error",
  },
] as const;

export class IShareVaultErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IShareVaultErrorsInterface {
    return new Interface(_abi) as IShareVaultErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IShareVaultErrors {
    return new Contract(address, _abi, runner) as unknown as IShareVaultErrors;
  }
}
